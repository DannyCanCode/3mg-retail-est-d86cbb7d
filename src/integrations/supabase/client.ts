// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './database.types';

// Get URL and key from environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// DEBUG: Log whether env vars are picked up
console.log('[DEBUG] SUPABASE_URL =', SUPABASE_URL?.slice(0, 40) || 'undefined', '...');
console.log('[DEBUG] ANON_KEY present =', !!SUPABASE_ANON_KEY);

// Check if we have valid Supabase credentials
if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  console.error('Supabase URL or Anon Key is missing. Check environment variables.');
}

// ---------- Safe storage helper ----------
function safeStorage(): Storage {
  try {
    localStorage.setItem('__probe', '1');
    localStorage.removeItem('__probe');
    return localStorage;
  } catch (err) {
    console.warn('[Supabase] localStorage blocked â€“ falling back to in-memory store');
    let mem: Record<string, string> = {};
    return {
      getItem: (k: string) => (k in mem ? mem[k] : null),
      setItem: (k: string, v: string) => {
        mem[k] = v;
      },
      removeItem: (k: string) => {
        delete mem[k];
      },
      clear: () => {
        mem = {};
      },
      key: () => null,
      get length() {
        return Object.keys(mem).length;
      },
    } as unknown as Storage;
  }
}

// ---------- Supabase client ----------
export const supabase = createClient<Database>(
  SUPABASE_URL || '',
  SUPABASE_ANON_KEY || '',
  {
    auth: {
      persistSession: true,          // keep token in memory/localStorage via safeStorage
      autoRefreshToken: true,        // FIXED: Enable auto refresh to prevent authentication failures
      detectSessionInUrl: true,      // FIXED: Enable session detection for better auth handling
      storage: safeStorage(),
    },
  }
);

// Expose for debugging convenience
// @ts-ignore
if (typeof window !== 'undefined') window.supabase = supabase;

// Helper to confirm env vars
export const isSupabaseConfigured = (): boolean => !!SUPABASE_URL && !!SUPABASE_ANON_KEY;